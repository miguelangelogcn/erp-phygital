rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the leader of a team
    function isTeamLeader(teamId, userId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.leaderId == userId;
    }

    // Users: Can read their own data and leaders can read team members' data
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isTeamLeader(get(/databases/$(database)/documents/users/$(userId)).data.teamId, request.auth.uid));
      allow write: if request.auth != null && request.auth.uid == userId;

      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Roles: Authenticated users can read, but only specific roles can write
    match /roles/{roleId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.hasAny(['manage_roles']);
    }

    // Teams: Authenticated users can read, but only specific roles can write
    match /teams/{teamId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.hasAny(['manage_teams']);
    }

    // Clients: Authenticated users can read, but only specific roles can write
    match /clients/{clientId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.hasAny(['manage_clients']);
    }
    
    // Calendar Events: Authenticated users can manage events
    match /calendarEvents/{eventId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.hasAny(['manage_calendar']);
    }

    // Tasks and Recurring Tasks: Can be read/written by responsible user or their team leader
    match /{taskCollection}/{taskId} where taskCollection in ['tasks', 'recurringTasks'] {
       allow read, write: if request.auth != null && 
                           (request.auth.uid == resource.data.responsibleId || 
                           (resource.data.teamId != null && isTeamLeader(resource.data.teamId, request.auth.uid)) ||
                           (request.auth.uid in resource.data.assistantIds));
        
       allow create: if request.auth != null; // Further validation in Cloud Functions
       allow update, delete: if request.auth != null; // Further validation in Cloud Functions
    }
  }
}
